
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'instBlockleftTkCommaleftTkOrleftTkAndleftTkEqualTkNEqualleftTkLessTkLeqTkGeqTkGreaterleftTkPlusTkMinusleftTkMultrightUMinusTkNotTkAnd TkArray TkArrow TkAsig TkBool TkCBlock TkCBracket TkClosePar TkComma TkComment TkConcat TkDeclare TkDo TkEqual TkFalse TkFi TkFor TkGeq TkGreater TkGuard TkId TkIf TkIn TkInt TkLeq TkLess TkMinus TkMult TkNEqual TkNewLine TkNot TkNum TkOBlock TkOBracket TkOd TkOpenPar TkOr TkPlus TkPrint TkRof TkSemicolon TkSkip TkSoForth TkSpace TkString TkTo TkTrue TkTwoPoints\n            instBlock : TkOBlock declare TkCBlock\n                      | TkOBlock declare code TkCBlock\n                      | TkOBlock code TkCBlock\n            \n                declare : TkDeclare declaration\n                        | TkDeclare seqDeclare\n            \n                declaration : DeclaList TkTwoPoints type\n            \n            DeclaList : TkId TkComma DeclaList\n                        | TkId\n            \n                seqDeclare : declaration TkSemicolon declaration\n                           | seqDeclare TkSemicolon declaration\n            \n                type : TkInt\n                     | TkBool\n                     | TkArray TkOBracket TkNum TkSoForth TkNum TkCBracket\n                     | TkArray TkOBracket TkMinus TkNum TkSoForth TkMinus TkNum TkCBracket\n                     | TkArray TkOBracket TkNum TkSoForth TkMinus TkNum TkCBracket\n                     | TkArray TkOBracket TkMinus TkNum TkSoForth TkNum TkCBracket\n            \n                code : instruction\n                     | sequencing\n            \n                sequencing : instruction TkSemicolon instruction\n                           | sequencing TkSemicolon instruction\n            \n                instPrint : TkPrint printAble\n                          | TkPrint instConcat\n            \n                instConcat : printAble TkConcat  printAble\n                           | instConcat TkConcat printAble\n            \n            printAble : TkString\n            \n            printAble : exp\n            \n                arrayIni : exp TkComma exp\n                         | arrayIni TkComma exp\n            \n                instAsig : TkId TkAsig exp\n                         | TkId TkAsig arrayIni\n                         | TkId TkAsig modArray\n            \n                instruction : instPrint\n                            | instAsig\n                            | instSkip\n                            | instBlock\n                            | instFor\n                            | instIf\n                            | instDo\n            \n                consArray : TkId TkOBracket exp TkCBracket\n            \n                consArray : modArray TkOBracket exp TkCBracket\n            \n                modArray : modArray TkOpenPar exp TkTwoPoints exp TkClosePar\n                         | finish\n                \n            \n                finish : TkId TkOpenPar exp TkTwoPoints exp TkClosePar\n            \n                exp : exp TkPlus exp\n                    | exp TkMinus exp\n                    | exp TkMult exp\n                    | exp TkAnd exp\n                    | exp TkOr exp\n                    | exp TkLess exp\n                    | exp TkLeq exp\n                    | exp TkGeq exp\n                    | exp TkGreater exp\n                    | exp TkEqual exp\n                    | exp TkNEqual exp\n            \n                exp : TkNot exp\n                    | TkOpenPar exp TkClosePar\n                    | consArray\n            \n                exp : TkNum\n                    | TkTrue\n                    | TkFalse\n                    | TkMinus exp %prec UMinus\n            \n                exp : TkId \n            \n                instFor : TkFor TkId TkIn exp TkTo exp TkArrow code TkRof\n            \n                instIf : TkIf guards TkFi\n            \n                instDo : TkDo guards TkOd\n            \n                guards : guards TkGuard then \n                       | then\n            \n                then : exp TkArrow code\n            \n            ignorados : TkComment\n                      | TkSpace\n                      | TkNewLine\n                      | ignorados\n            instSkip : TkSkip\n            '
    
_lr_action_items = {'TkOBlock':([0,2,3,24,25,28,29,83,85,86,87,88,89,132,137,142,144,145,],[2,2,2,-4,-5,2,2,2,-9,-10,-6,-11,-12,2,-13,-15,-16,-14,]),'$end':([1,21,23,50,],[0,-1,-3,-2,]),'TkDeclare':([2,],[5,]),'TkPrint':([2,3,24,25,28,29,83,85,86,87,88,89,132,137,142,144,145,],[15,15,-4,-5,15,15,15,-9,-10,-6,-11,-12,15,-13,-15,-16,-14,]),'TkId':([2,3,5,15,18,19,20,24,25,28,29,34,35,36,44,51,52,54,57,58,59,60,61,62,63,64,65,66,67,68,69,73,74,75,76,80,82,83,85,86,87,88,89,110,111,117,119,122,132,137,142,144,145,],[16,16,27,41,45,41,41,-4,-5,16,16,41,41,41,41,27,27,27,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,16,-9,-10,-6,-11,-12,41,41,41,41,41,16,-13,-15,-16,-14,]),'TkSkip':([2,3,24,25,28,29,83,85,86,87,88,89,132,137,142,144,145,],[17,17,-4,-5,17,17,17,-9,-10,-6,-11,-12,17,-13,-15,-16,-14,]),'TkFor':([2,3,24,25,28,29,83,85,86,87,88,89,132,137,142,144,145,],[18,18,-4,-5,18,18,18,-9,-10,-6,-11,-12,18,-13,-15,-16,-14,]),'TkIf':([2,3,24,25,28,29,83,85,86,87,88,89,132,137,142,144,145,],[19,19,-4,-5,19,19,19,-9,-10,-6,-11,-12,19,-13,-15,-16,-14,]),'TkDo':([2,3,24,25,28,29,83,85,86,87,88,89,132,137,142,144,145,],[20,20,-4,-5,20,20,20,-9,-10,-6,-11,-12,20,-13,-15,-16,-14,]),'TkCBlock':([3,4,6,7,8,9,10,11,12,13,14,17,21,22,23,24,25,30,31,32,33,37,38,39,40,41,43,50,55,56,70,71,77,78,79,81,84,85,86,87,88,89,92,93,94,95,96,97,98,99,100,101,102,103,104,105,116,118,120,121,130,131,137,141,142,144,145,],[21,23,-17,-18,-32,-33,-34,-35,-36,-37,-38,-73,-1,50,-3,-4,-5,-21,-22,-25,-26,-57,-58,-59,-60,-62,-42,-2,-19,-20,-61,-55,-29,-30,-31,-64,-65,-9,-10,-6,-11,-12,-23,-24,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-56,-39,-40,-27,-28,-43,-41,-13,-63,-15,-16,-14,]),'TkFi':([6,7,8,9,10,11,12,13,14,17,21,23,30,31,32,33,37,38,39,40,41,43,46,47,50,55,56,70,71,77,78,79,81,84,92,93,94,95,96,97,98,99,100,101,102,103,104,105,113,114,116,118,120,121,130,131,141,],[-17,-18,-32,-33,-34,-35,-36,-37,-38,-73,-1,-3,-21,-22,-25,-26,-57,-58,-59,-60,-62,-42,81,-67,-2,-19,-20,-61,-55,-29,-30,-31,-64,-65,-23,-24,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-56,-66,-68,-39,-40,-27,-28,-43,-41,-63,]),'TkGuard':([6,7,8,9,10,11,12,13,14,17,21,23,30,31,32,33,37,38,39,40,41,43,46,47,49,50,55,56,70,71,77,78,79,81,84,92,93,94,95,96,97,98,99,100,101,102,103,104,105,113,114,116,118,120,121,130,131,141,],[-17,-18,-32,-33,-34,-35,-36,-37,-38,-73,-1,-3,-21,-22,-25,-26,-57,-58,-59,-60,-62,-42,82,-67,82,-2,-19,-20,-61,-55,-29,-30,-31,-64,-65,-23,-24,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-56,-66,-68,-39,-40,-27,-28,-43,-41,-63,]),'TkOd':([6,7,8,9,10,11,12,13,14,17,21,23,30,31,32,33,37,38,39,40,41,43,47,49,50,55,56,70,71,77,78,79,81,84,92,93,94,95,96,97,98,99,100,101,102,103,104,105,113,114,116,118,120,121,130,131,141,],[-17,-18,-32,-33,-34,-35,-36,-37,-38,-73,-1,-3,-21,-22,-25,-26,-57,-58,-59,-60,-62,-42,-67,84,-2,-19,-20,-61,-55,-29,-30,-31,-64,-65,-23,-24,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-56,-66,-68,-39,-40,-27,-28,-43,-41,-63,]),'TkRof':([6,7,8,9,10,11,12,13,14,17,21,23,30,31,32,33,37,38,39,40,41,43,50,55,56,70,71,77,78,79,81,84,92,93,94,95,96,97,98,99,100,101,102,103,104,105,116,118,120,121,130,131,136,141,],[-17,-18,-32,-33,-34,-35,-36,-37,-38,-73,-1,-3,-21,-22,-25,-26,-57,-58,-59,-60,-62,-42,-2,-19,-20,-61,-55,-29,-30,-31,-64,-65,-23,-24,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-56,-39,-40,-27,-28,-43,-41,141,-63,]),'TkSemicolon':([6,7,8,9,10,11,12,13,14,17,21,23,24,25,30,31,32,33,37,38,39,40,41,43,50,55,56,70,71,77,78,79,81,84,85,86,87,88,89,92,93,94,95,96,97,98,99,100,101,102,103,104,105,116,118,120,121,130,131,137,141,142,144,145,],[28,29,-32,-33,-34,-35,-36,-37,-38,-73,-1,-3,51,52,-21,-22,-25,-26,-57,-58,-59,-60,-62,-42,-2,-19,-20,-61,-55,-29,-30,-31,-64,-65,-9,-10,-6,-11,-12,-23,-24,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-56,-39,-40,-27,-28,-43,-41,-13,-63,-15,-16,-14,]),'TkString':([15,57,58,],[32,32,32,]),'TkNot':([15,19,20,34,35,36,44,57,58,59,60,61,62,63,64,65,66,67,68,69,73,74,75,76,80,82,110,111,117,119,122,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'TkOpenPar':([15,19,20,34,35,36,41,42,43,44,57,58,59,60,61,62,63,64,65,66,67,68,69,73,74,75,76,79,80,82,110,111,117,119,122,130,131,],[36,36,36,36,36,36,74,76,-42,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,76,36,36,36,36,36,36,36,-43,-41,]),'TkNum':([15,19,20,34,35,36,44,57,58,59,60,61,62,63,64,65,66,67,68,69,73,74,75,76,80,82,110,111,115,117,119,122,124,128,134,135,139,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,123,38,38,38,129,133,138,140,143,]),'TkTrue':([15,19,20,34,35,36,44,57,58,59,60,61,62,63,64,65,66,67,68,69,73,74,75,76,80,82,110,111,117,119,122,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'TkFalse':([15,19,20,34,35,36,44,57,58,59,60,61,62,63,64,65,66,67,68,69,73,74,75,76,80,82,110,111,117,119,122,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'TkMinus':([15,19,20,33,34,35,36,37,38,39,40,41,44,48,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,82,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,115,116,117,118,119,120,121,122,125,126,127,128,135,],[34,34,34,60,34,34,34,-57,-58,-59,-60,-62,34,60,34,34,34,34,34,34,34,34,34,34,34,34,34,-61,-55,60,34,34,34,34,60,34,34,-44,-45,-46,60,60,60,60,60,60,60,60,-56,60,60,60,60,34,34,60,124,-39,34,-40,34,60,60,34,60,60,60,134,139,]),'TkAsig':([16,],[44,]),'TkTwoPoints':([26,27,37,38,39,40,41,70,71,91,94,95,96,97,98,99,100,101,102,103,104,105,107,109,116,118,],[53,-8,-57,-58,-59,-60,-62,-61,-55,-7,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-56,117,119,-39,-40,]),'TkComma':([27,37,38,39,40,41,70,71,77,78,94,95,96,97,98,99,100,101,102,103,104,105,116,118,120,121,],[54,-57,-58,-59,-60,-62,-61,-55,110,111,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-56,-39,-40,-27,-28,]),'TkConcat':([30,31,32,33,37,38,39,40,41,70,71,92,93,94,95,96,97,98,99,100,101,102,103,104,105,116,118,],[57,58,-25,-26,-57,-58,-59,-60,-62,-61,-55,-23,-24,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-56,-39,-40,]),'TkPlus':([33,37,38,39,40,41,48,70,71,72,77,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,112,116,118,120,121,125,126,127,],[59,-57,-58,-59,-60,-62,59,-61,-55,59,59,-44,-45,-46,59,59,59,59,59,59,59,59,-56,59,59,59,59,59,-39,-40,59,59,59,59,59,]),'TkMult':([33,37,38,39,40,41,48,70,71,72,77,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,112,116,118,120,121,125,126,127,],[61,-57,-58,-59,-60,-62,61,-61,-55,61,61,61,61,-46,61,61,61,61,61,61,61,61,-56,61,61,61,61,61,-39,-40,61,61,61,61,61,]),'TkAnd':([33,37,38,39,40,41,48,70,71,72,77,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,112,116,118,120,121,125,126,127,],[62,-57,-58,-59,-60,-62,62,-61,-55,62,62,-44,-45,-46,-47,62,-49,-50,-51,-52,-53,-54,-56,62,62,62,62,62,-39,-40,62,62,62,62,62,]),'TkOr':([33,37,38,39,40,41,48,70,71,72,77,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,112,116,118,120,121,125,126,127,],[63,-57,-58,-59,-60,-62,63,-61,-55,63,63,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-56,63,63,63,63,63,-39,-40,63,63,63,63,63,]),'TkLess':([33,37,38,39,40,41,48,70,71,72,77,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,112,116,118,120,121,125,126,127,],[64,-57,-58,-59,-60,-62,64,-61,-55,64,64,-44,-45,-46,64,64,-49,-50,-51,-52,64,64,-56,64,64,64,64,64,-39,-40,64,64,64,64,64,]),'TkLeq':([33,37,38,39,40,41,48,70,71,72,77,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,112,116,118,120,121,125,126,127,],[65,-57,-58,-59,-60,-62,65,-61,-55,65,65,-44,-45,-46,65,65,-49,-50,-51,-52,65,65,-56,65,65,65,65,65,-39,-40,65,65,65,65,65,]),'TkGeq':([33,37,38,39,40,41,48,70,71,72,77,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,112,116,118,120,121,125,126,127,],[66,-57,-58,-59,-60,-62,66,-61,-55,66,66,-44,-45,-46,66,66,-49,-50,-51,-52,66,66,-56,66,66,66,66,66,-39,-40,66,66,66,66,66,]),'TkGreater':([33,37,38,39,40,41,48,70,71,72,77,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,112,116,118,120,121,125,126,127,],[67,-57,-58,-59,-60,-62,67,-61,-55,67,67,-44,-45,-46,67,67,-49,-50,-51,-52,67,67,-56,67,67,67,67,67,-39,-40,67,67,67,67,67,]),'TkEqual':([33,37,38,39,40,41,48,70,71,72,77,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,112,116,118,120,121,125,126,127,],[68,-57,-58,-59,-60,-62,68,-61,-55,68,68,-44,-45,-46,68,68,-49,-50,-51,-52,-53,-54,-56,68,68,68,68,68,-39,-40,68,68,68,68,68,]),'TkNEqual':([33,37,38,39,40,41,48,70,71,72,77,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,112,116,118,120,121,125,126,127,],[69,-57,-58,-59,-60,-62,69,-61,-55,69,69,-44,-45,-46,69,69,-49,-50,-51,-52,-53,-54,-56,69,69,69,69,69,-39,-40,69,69,69,69,69,]),'TkArrow':([37,38,39,40,41,48,70,71,94,95,96,97,98,99,100,101,102,103,104,105,116,118,127,],[-57,-58,-59,-60,-62,83,-61,-55,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-56,-39,-40,132,]),'TkClosePar':([37,38,39,40,41,70,71,72,94,95,96,97,98,99,100,101,102,103,104,105,116,118,125,126,],[-57,-58,-59,-60,-62,-61,-55,105,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-56,-39,-40,130,131,]),'TkCBracket':([37,38,39,40,41,70,71,94,95,96,97,98,99,100,101,102,103,104,105,106,108,116,118,133,138,140,143,],[-57,-58,-59,-60,-62,-61,-55,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-56,116,118,-39,-40,137,142,144,145,]),'TkTo':([37,38,39,40,41,70,71,94,95,96,97,98,99,100,101,102,103,104,105,112,116,118,],[-57,-58,-59,-60,-62,-61,-55,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-56,122,-39,-40,]),'TkOBracket':([41,42,43,79,90,130,131,],[73,75,-42,75,115,-43,-41,]),'TkIn':([45,],[80,]),'TkInt':([53,],[88,]),'TkBool':([53,],[89,]),'TkArray':([53,],[90,]),'TkSoForth':([123,129,],[128,135,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instBlock':([0,2,3,28,29,83,132,],[1,11,11,11,11,11,11,]),'declare':([2,],[3,]),'code':([2,3,83,132,],[4,22,114,136,]),'instruction':([2,3,28,29,83,132,],[6,6,55,56,6,6,]),'sequencing':([2,3,83,132,],[7,7,7,7,]),'instPrint':([2,3,28,29,83,132,],[8,8,8,8,8,8,]),'instAsig':([2,3,28,29,83,132,],[9,9,9,9,9,9,]),'instSkip':([2,3,28,29,83,132,],[10,10,10,10,10,10,]),'instFor':([2,3,28,29,83,132,],[12,12,12,12,12,12,]),'instIf':([2,3,28,29,83,132,],[13,13,13,13,13,13,]),'instDo':([2,3,28,29,83,132,],[14,14,14,14,14,14,]),'declaration':([5,51,52,],[24,85,86,]),'seqDeclare':([5,],[25,]),'DeclaList':([5,51,52,54,],[26,26,26,91,]),'printAble':([15,57,58,],[30,92,93,]),'instConcat':([15,],[31,]),'exp':([15,19,20,34,35,36,44,57,58,59,60,61,62,63,64,65,66,67,68,69,73,74,75,76,80,82,110,111,117,119,122,],[33,48,48,70,71,72,77,33,33,94,95,96,97,98,99,100,101,102,103,104,106,107,108,109,112,48,120,121,125,126,127,]),'consArray':([15,19,20,34,35,36,44,57,58,59,60,61,62,63,64,65,66,67,68,69,73,74,75,76,80,82,110,111,117,119,122,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'modArray':([15,19,20,34,35,36,44,57,58,59,60,61,62,63,64,65,66,67,68,69,73,74,75,76,80,82,110,111,117,119,122,],[42,42,42,42,42,42,79,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'finish':([15,19,20,34,35,36,44,57,58,59,60,61,62,63,64,65,66,67,68,69,73,74,75,76,80,82,110,111,117,119,122,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'guards':([19,20,],[46,49,]),'then':([19,20,82,],[47,47,113,]),'arrayIni':([44,],[78,]),'type':([53,],[87,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instBlock","S'",1,None,None,None),
  ('instBlock -> TkOBlock declare TkCBlock','instBlock',3,'p_instBlock','AnalizadorSintactico.py',34),
  ('instBlock -> TkOBlock declare code TkCBlock','instBlock',4,'p_instBlock','AnalizadorSintactico.py',35),
  ('instBlock -> TkOBlock code TkCBlock','instBlock',3,'p_instBlock','AnalizadorSintactico.py',36),
  ('declare -> TkDeclare declaration','declare',2,'p_declare','AnalizadorSintactico.py',45),
  ('declare -> TkDeclare seqDeclare','declare',2,'p_declare','AnalizadorSintactico.py',46),
  ('declaration -> DeclaList TkTwoPoints type','declaration',3,'p_declaration','AnalizadorSintactico.py',52),
  ('DeclaList -> TkId TkComma DeclaList','DeclaList',3,'p_decaList','AnalizadorSintactico.py',59),
  ('DeclaList -> TkId','DeclaList',1,'p_decaList','AnalizadorSintactico.py',60),
  ('seqDeclare -> declaration TkSemicolon declaration','seqDeclare',3,'p_seqDeclare','AnalizadorSintactico.py',69),
  ('seqDeclare -> seqDeclare TkSemicolon declaration','seqDeclare',3,'p_seqDeclare','AnalizadorSintactico.py',70),
  ('type -> TkInt','type',1,'p_type','AnalizadorSintactico.py',76),
  ('type -> TkBool','type',1,'p_type','AnalizadorSintactico.py',77),
  ('type -> TkArray TkOBracket TkNum TkSoForth TkNum TkCBracket','type',6,'p_type','AnalizadorSintactico.py',78),
  ('type -> TkArray TkOBracket TkMinus TkNum TkSoForth TkMinus TkNum TkCBracket','type',8,'p_type','AnalizadorSintactico.py',79),
  ('type -> TkArray TkOBracket TkNum TkSoForth TkMinus TkNum TkCBracket','type',7,'p_type','AnalizadorSintactico.py',80),
  ('type -> TkArray TkOBracket TkMinus TkNum TkSoForth TkNum TkCBracket','type',7,'p_type','AnalizadorSintactico.py',81),
  ('code -> instruction','code',1,'p_code','AnalizadorSintactico.py',97),
  ('code -> sequencing','code',1,'p_code','AnalizadorSintactico.py',98),
  ('sequencing -> instruction TkSemicolon instruction','sequencing',3,'p_sequencing','AnalizadorSintactico.py',104),
  ('sequencing -> sequencing TkSemicolon instruction','sequencing',3,'p_sequencing','AnalizadorSintactico.py',105),
  ('instPrint -> TkPrint printAble','instPrint',2,'p_instPrint','AnalizadorSintactico.py',111),
  ('instPrint -> TkPrint instConcat','instPrint',2,'p_instPrint','AnalizadorSintactico.py',112),
  ('instConcat -> printAble TkConcat printAble','instConcat',3,'p_instConcat','AnalizadorSintactico.py',119),
  ('instConcat -> instConcat TkConcat printAble','instConcat',3,'p_instConcat','AnalizadorSintactico.py',120),
  ('printAble -> TkString','printAble',1,'p_printeAble1','AnalizadorSintactico.py',126),
  ('printAble -> exp','printAble',1,'p_printeAble2','AnalizadorSintactico.py',132),
  ('arrayIni -> exp TkComma exp','arrayIni',3,'p_arrayIni','AnalizadorSintactico.py',138),
  ('arrayIni -> arrayIni TkComma exp','arrayIni',3,'p_arrayIni','AnalizadorSintactico.py',139),
  ('instAsig -> TkId TkAsig exp','instAsig',3,'p_instAsig','AnalizadorSintactico.py',145),
  ('instAsig -> TkId TkAsig arrayIni','instAsig',3,'p_instAsig','AnalizadorSintactico.py',146),
  ('instAsig -> TkId TkAsig modArray','instAsig',3,'p_instAsig','AnalizadorSintactico.py',147),
  ('instruction -> instPrint','instruction',1,'p_instruction','AnalizadorSintactico.py',153),
  ('instruction -> instAsig','instruction',1,'p_instruction','AnalizadorSintactico.py',154),
  ('instruction -> instSkip','instruction',1,'p_instruction','AnalizadorSintactico.py',155),
  ('instruction -> instBlock','instruction',1,'p_instruction','AnalizadorSintactico.py',156),
  ('instruction -> instFor','instruction',1,'p_instruction','AnalizadorSintactico.py',157),
  ('instruction -> instIf','instruction',1,'p_instruction','AnalizadorSintactico.py',158),
  ('instruction -> instDo','instruction',1,'p_instruction','AnalizadorSintactico.py',159),
  ('consArray -> TkId TkOBracket exp TkCBracket','consArray',4,'p_consArray','AnalizadorSintactico.py',165),
  ('consArray -> modArray TkOBracket exp TkCBracket','consArray',4,'p_consArray1','AnalizadorSintactico.py',171),
  ('modArray -> modArray TkOpenPar exp TkTwoPoints exp TkClosePar','modArray',6,'p_modArray','AnalizadorSintactico.py',177),
  ('modArray -> finish','modArray',1,'p_modArray','AnalizadorSintactico.py',178),
  ('finish -> TkId TkOpenPar exp TkTwoPoints exp TkClosePar','finish',6,'p_modArray1','AnalizadorSintactico.py',188),
  ('exp -> exp TkPlus exp','exp',3,'p_opBin','AnalizadorSintactico.py',194),
  ('exp -> exp TkMinus exp','exp',3,'p_opBin','AnalizadorSintactico.py',195),
  ('exp -> exp TkMult exp','exp',3,'p_opBin','AnalizadorSintactico.py',196),
  ('exp -> exp TkAnd exp','exp',3,'p_opBin','AnalizadorSintactico.py',197),
  ('exp -> exp TkOr exp','exp',3,'p_opBin','AnalizadorSintactico.py',198),
  ('exp -> exp TkLess exp','exp',3,'p_opBin','AnalizadorSintactico.py',199),
  ('exp -> exp TkLeq exp','exp',3,'p_opBin','AnalizadorSintactico.py',200),
  ('exp -> exp TkGeq exp','exp',3,'p_opBin','AnalizadorSintactico.py',201),
  ('exp -> exp TkGreater exp','exp',3,'p_opBin','AnalizadorSintactico.py',202),
  ('exp -> exp TkEqual exp','exp',3,'p_opBin','AnalizadorSintactico.py',203),
  ('exp -> exp TkNEqual exp','exp',3,'p_opBin','AnalizadorSintactico.py',204),
  ('exp -> TkNot exp','exp',2,'p_exp','AnalizadorSintactico.py',231),
  ('exp -> TkOpenPar exp TkClosePar','exp',3,'p_exp','AnalizadorSintactico.py',232),
  ('exp -> consArray','exp',1,'p_exp','AnalizadorSintactico.py',233),
  ('exp -> TkNum','exp',1,'p_literales','AnalizadorSintactico.py',244),
  ('exp -> TkTrue','exp',1,'p_literales','AnalizadorSintactico.py',245),
  ('exp -> TkFalse','exp',1,'p_literales','AnalizadorSintactico.py',246),
  ('exp -> TkMinus exp','exp',2,'p_literales','AnalizadorSintactico.py',247),
  ('exp -> TkId','exp',1,'p_id','AnalizadorSintactico.py',256),
  ('instFor -> TkFor TkId TkIn exp TkTo exp TkArrow code TkRof','instFor',9,'p_instFor','AnalizadorSintactico.py',262),
  ('instIf -> TkIf guards TkFi','instIf',3,'p_instIf','AnalizadorSintactico.py',268),
  ('instDo -> TkDo guards TkOd','instDo',3,'p_instDo','AnalizadorSintactico.py',274),
  ('guards -> guards TkGuard then','guards',3,'p_guards','AnalizadorSintactico.py',280),
  ('guards -> then','guards',1,'p_guards','AnalizadorSintactico.py',281),
  ('then -> exp TkArrow code','then',3,'p_then','AnalizadorSintactico.py',290),
  ('ignorados -> TkComment','ignorados',1,'p_ignorados','AnalizadorSintactico.py',296),
  ('ignorados -> TkSpace','ignorados',1,'p_ignorados','AnalizadorSintactico.py',297),
  ('ignorados -> TkNewLine','ignorados',1,'p_ignorados','AnalizadorSintactico.py',298),
  ('ignorados -> ignorados','ignorados',1,'p_ignorados','AnalizadorSintactico.py',299),
  ('instSkip -> TkSkip','instSkip',1,'p_ignorados','AnalizadorSintactico.py',300),
]
